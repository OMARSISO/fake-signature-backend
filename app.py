#!/usr/bin/env python3
"""
Fake Signature Web Service - Production Backend
–í–µ–±-—Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π –º–µ–∂–¥—É PE —Ñ–∞–π–ª–∞–º–∏
"""

import os
import uuid
import tempfile
from datetime import datetime
from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
from werkzeug.utils import secure_filename
from werkzeug.exceptions import RequestEntityTooLarge
import threading
import time

from sigthief_module import create_fake_signature, FakeSignatureError

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app.config['MAX_CONTENT_LENGTH'] = 100 * 1024 * 1024  # 100MB –º–∞–∫—Å–∏–º—É–º
app.config['UPLOAD_FOLDER'] = '/tmp/fakesig_uploads'
app.config['RESULT_FOLDER'] = '/tmp/fakesig_results'
app.config['SECRET_KEY'] = 'fake-signature-web-service-secret-key'

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
os.makedirs(app.config['RESULT_FOLDER'], exist_ok=True)

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
ALLOWED_EXTENSIONS = {'exe', 'dll', 'sys'}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
results_storage = {}

def allowed_file(filename):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def cleanup_old_files():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ)"""
    while True:
        try:
            current_time = time.time()
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
            for folder in [app.config['UPLOAD_FOLDER'], app.config['RESULT_FOLDER']]:
                for filename in os.listdir(folder):
                    filepath = os.path.join(folder, filename)
                    if os.path.isfile(filepath):
                        file_age = current_time - os.path.getctime(filepath)
                        if file_age > 3600:  # 1 —á–∞—Å
                            os.remove(filepath)
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            expired_keys = []
            for task_id, result_info in results_storage.items():
                if current_time - result_info['timestamp'] > 3600:
                    expired_keys.append(task_id)
            
            for key in expired_keys:
                del results_storage[key]
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {e}")
        
        time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É
cleanup_thread = threading.Thread(target=cleanup_old_files, daemon=True)
cleanup_thread.start()

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API"""
    return jsonify({
        'service': 'Fake Signature Web Service',
        'version': '1.0.0',
        'status': 'running',
        'endpoints': {
            'POST /api/process': 'Process files and copy signature',
            'GET /api/download/<task_id>': 'Download processed file',
            'GET /api/status': 'Service status'
        },
        'frontend': 'Deploy frontend separately and configure API_BASE_URL',
        'cors': 'enabled',
        'max_file_size': '100MB'
    })

@app.route('/api/status')
def status():
    """API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        'status': 'running',
        'version': '1.0.0',
        'supported_formats': list(ALLOWED_EXTENSIONS),
        'max_file_size': '100MB',
        'active_tasks': len(results_storage),
        'service_name': 'Fake Signature Web Service',
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/process', methods=['POST'])
def process_files():
    """API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
        if 'signed_file' not in request.files or 'target_file' not in request.files:
            return jsonify({'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞'}), 400
        
        signed_file = request.files['signed_file']
        target_file = request.files['target_file']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã –≤—ã–±—Ä–∞–Ω—ã
        if signed_file.filename == '' or target_file.filename == '':
            return jsonify({'error': '–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        if not (allowed_file(signed_file.filename) and allowed_file(target_file.filename)):
            return jsonify({'error': '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .exe, .dll, .sys'}), 400
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–¥–∞—á–∏
        task_id = str(uuid.uuid4())
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        signed_filename = secure_filename(signed_file.filename)
        target_filename = secure_filename(target_file.filename)
        
        # –ü—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        signed_path = os.path.join(app.config['UPLOAD_FOLDER'], f"{task_id}_signed_{signed_filename}")
        target_path = os.path.join(app.config['UPLOAD_FOLDER'], f"{task_id}_target_{target_filename}")
        result_path = os.path.join(app.config['RESULT_FOLDER'], f"{task_id}_result_{target_filename}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        signed_file.save(signed_path)
        target_file.save(target_path)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å –ø–æ–º–æ—â—å—é Fake Signature
        fake_signature = create_fake_signature()
        
        try:
            processed_path, output_filename = fake_signature.process_files(
                signed_path, target_path, result_path
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            results_storage[task_id] = {
                'filename': output_filename,
                'path': processed_path,
                'timestamp': time.time(),
                'original_target_name': target_file.filename
            }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            download_url = f"/api/download/{task_id}"
            
            return jsonify({
                'success': True,
                'task_id': task_id,
                'download_url': download_url,
                'filename': f"signed_{target_file.filename}"
            })
            
        except FakeSignatureError as e:
            return jsonify({'error': str(e)}), 400
        
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                if os.path.exists(signed_path):
                    os.remove(signed_path)
                if os.path.exists(target_path):
                    os.remove(target_path)
            except:
                pass
    
    except RequestEntityTooLarge:
        return jsonify({'error': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 100MB)'}), 413
    except Exception as e:
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/api/download/<task_id>')
def download_file(task_id):
    """API –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    if task_id not in results_storage:
        return jsonify({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫'}), 404
    
    result_info = results_storage[task_id]
    file_path = result_info['path']
    
    if not os.path.exists(file_path):
        return jsonify({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'}), 404
    
    try:
        return send_file(
            file_path,
            as_attachment=True,
            download_name=f"signed_{result_info['original_target_name']}",
            mimetype='application/octet-stream'
        )
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}'}), 500

@app.errorhandler(413)
def too_large(e):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    return jsonify({'error': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 100MB)'}), 413

@app.errorhandler(404)
def not_found(e):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–∫–∏"""
    return jsonify({'error': 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

@app.errorhandler(500)
def internal_error(e):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ Fake Signature Web Service...")
    print("üìÅ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫:", app.config['UPLOAD_FOLDER'])
    print("üìÅ –ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", app.config['RESULT_FOLDER'])
    print("üåê –°–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:5000")
    print("üîó CORS –≤–∫–ª—é—á–µ–Ω –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤")
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–ª–µ–π!")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è –¥–µ–ø–ª–æ—è)
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)

